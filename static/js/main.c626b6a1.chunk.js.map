{"version":3,"sources":["components/Form/Form.jsx","components/Contacts/Contacts.jsx","components/Filter/Filter.jsx","components/App.jsx","reportWebVitals.js","index.js","components/Form/Form.module.css"],"names":["Form","onSubmit","useState","name","setName","number","setNumber","handleInputChange","evt","currentTarget","value","reset","preventDefault","className","css","formRow","type","onChange","pattern","title","required","Contacts","contacts","onClick","map","contact","id","Filter","App","setContacts","filter","setFilter","useEffect","localStorage","getItem","parsedContacts","JSON","parse","window","setItem","stringify","postcard","contactsData","some","toLowerCase","alert","prevState","prev","normalizedFilter","includes","filterByName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.c626b6a1.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport css from '../Form/Form.module.css';\r\n\r\nexport default function Form({ onSubmit }) {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  // const [contacts, setContacts] = useState([]);\r\n\r\n  const handleInputChange = evt => {\r\n    const { name, value } = evt.currentTarget;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = evt => {\r\n    evt.preventDefault();\r\n\r\n    onSubmit({ name, number });\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div className={css.formRow}>\r\n        <label>\r\n          Имя\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            onChange={handleInputChange}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n      </div>\r\n\r\n      <div className={css.formRow}>\r\n        <label>\r\n          Number\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            value={number}\r\n            onChange={handleInputChange}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </label>\r\n      </div>\r\n\r\n      <div className={css.formRow}>\r\n        <button type=\"submit\">Add contact</button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nForm.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  ),\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Contacts = ({ contacts, onClick }) => {\r\n  return (\r\n    <ul>\r\n      {contacts.map(contact => (\r\n        <li key={contacts.id}>\r\n          <p>\r\n            {contact.name}: {contact.number}\r\n          </p>\r\n          <button onClick={() => onClick(contact.id)} type=\"button\">\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Contacts;\r\n\r\nContacts.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  ).isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n  return (\r\n    <>\r\n      <label>\r\n        Find contacts by name\r\n        <input type=\"text\" name=\"filter\" value={value} onChange={onChange} />\r\n      </label>\r\n    </>\r\n  );\r\n};\r\nexport default Filter;\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n","import React, { useState, useEffect } from 'react';\nimport Form from '../components/Form/Form';\nimport Contacts from '../components/Contacts/Contacts';\nimport Filter from '../components/Filter/Filter';\nimport { v4 as uuidv4 } from 'uuid';\nimport css from '../components/Form/Form.module.css';\n\nexport default function App() {\n  const [contacts, setContacts] = useState([]);\n  const [filter, setFilter] = useState('');\n\n  // --LOCAL STORAGE--\n\n  useEffect(() => {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n    if (parsedContacts) {\n      setContacts(parsedContacts);\n    }\n  }, []);\n\n  useEffect(() => {\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const formSubmitHandler = contactsData => {\n    if (contacts.some(contact => contact.name.toLowerCase() === contactsData.name.toLowerCase())) {\n      alert(`${contactsData.name} is already exists in contact list`);\n      return;\n    }\n    setContacts(prevState => [...prevState, contactsData]);\n  };\n\n  // const handleDeleteContacts = id => {\n  //   setContacts(prevContacts => prevContacts.filter(contact => contact.id !== id));\n  // };\n  const deleteContact = id => {\n    setContacts(prev => prev.filter(contact => id !== contact.id));\n  };\n  // --FILTER--\n  const changeFilter = evt => {\n    setFilter(evt.currentTarget.value);\n  };\n\n  const filterByName = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n  };\n\n  return (\n    <>\n      <div className={css.postcard}>\n        <h1>Phonebook</h1>\n        <Form contacts={contacts} onSubmit={formSubmitHandler} />\n        <div className={css.formRow}>\n          <Filter value={filter} onChange={changeFilter} />\n        </div>\n        <h2>Contacts</h2>\n        <Contacts\n          filter={filter}\n          // onChange={filterByName}\n          onClick={deleteContact}\n          contacts={filterByName()}\n        />\n      </div>\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postcard\":\"Form_postcard__1Ac0H\",\"formRow\":\"Form_formRow__11iGD\"};"],"sourceRoot":""}